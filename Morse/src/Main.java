/**
 * Encrypter and Decrypter of code Morse
 *
 * @author Bryan Ciaponi
 * @version January 2025
 */

import java.io.*;
import java.nio.file.*;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        String Choice; // Container for scanner responses
        String Phrase = ""; // Container for input phrases
        String Morse = ""; // Container for Morse code input
        boolean gotwell;
        boolean status = true;
        File file = new File();
        Path path = Paths.get("./Morse/src/path.txt"); // Alternatively "./src/path.txt" if only the "Morse" folder is moved to another path

        Scanner a = new Scanner(System.in); // Scanner for responses or choices

        Encryption Phrase_to_Encrypt = new Encryption(Phrase);
        Decryption Morse_to_Decrypt = new Decryption(Morse);

        List<String> lines = new ArrayList<>();

        // Clear the console screen
        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");

        try {
            lines = Files.readAllLines(path);
            gotwell = true;
            for (String line : lines) {
                if (line.isEmpty()) {}
                else {
                    file.setPath(line);
                }
            }
        } catch (IOException e) {
            System.out.println(
                    "\n-----------------!!!ERROR!!!-----------------" +
                            "\nAn error occurred while trying to read the history." +
                            "\nCheck if \"" + path + "\" exists or is modifiable." +
                            "\nIf you want to use the \"history\" options, you'll need to fix" +
                            "\nthe problem and restart the application." +
                            "\n---------------------------------------------\n");
            gotwell = false;
        }

        System.out.println("ATTENTION! This application works exclusively with Morse code generated by this application.\n");

        while (true) {
            Phrase = "";
            Morse = "";

            if (gotwell) {
                file.readHistory();
                status = file.getStatus();
            }

            System.out.println("Choose which action you want to take:");
            if (status) {
                System.out.print("1 = Encrypt" + "\n" +
                        "2 = Decrypt" + "\n" +
                        "3 = History Options" + "\n" +
                        "4 = Exit\n" +
                        "\n> ");
                Choice = a.nextLine();
                System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");

                if (Choice.equals("1")) {
                    System.out.println("Write the phrase you want to encrypt down below:");
                    System.out.print("> ");
                    Phrase = a.nextLine();
                    System.out.println("\nEncryption in progress...\n");
                    Phrase_to_Encrypt.setPhrase(Phrase);
                    System.out.println("Result:");
                    System.out.println(Phrase_to_Encrypt.Encrypt());
                    System.out.println("\nDo you want to save this encryption in the history file? (type \"y\" if yes)");
                    System.out.print("> ");
                    Choice = a.nextLine();
                    if (Choice.equals("y")) {
                        file.writeHistory(Phrase, Phrase_to_Encrypt.getMorse());
                        System.out.println("\nSuccessfully updated history!");
                    }
                    System.out.println("\n(Press enter to continue)");
                    a.nextLine();
                    System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                } else if (Choice.equals("2")) {
                    System.out.println("Write the Morse code you want to decrypt down below:");
                    System.out.print("> ");
                    Morse = a.nextLine();
                    System.out.println("\nDecryption in progress...\n");
                    Morse_to_Decrypt.setMorse(Morse);
                    System.out.println("Result:");
                    System.out.println(Morse_to_Decrypt.Decrypt());
                    System.out.println("\nDo you want to save this decryption in the history file? (type \"y\" if yes)");
                    System.out.print("> ");
                    Choice = a.nextLine();
                    if (Choice.equals("y")) {
                        file.writeHistory(Morse_to_Decrypt.getPhrase(), Morse);
                        System.out.println("\nSuccessfully updated history!");
                    }
                    System.out.println("\n(Press enter to continue)");
                    a.nextLine();
                    System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                } else if (Choice.equals("3")) {
                    System.out.println("Choose which action you want to take:\n");
                    System.out.print("1 = Show History" + "\n" +
                            "2 = Erase History" + "\n" +
                            "3 = Change the \"history\" file path" + "\n" +
                            "4 = Go back to the main menu\n" +
                            "\n>");
                    Choice = a.nextLine();
                    if (Choice.equals("1")) {
                        System.out.println("\nHistory:\n\n");
                        file.printHistory();
                        System.out.println("\n(Press enter to continue)");
                        a.nextLine();
                    } else if (Choice.equals("2")) {
                        try {
                            Files.delete(path);
                            Files.createFile(path);
                            System.out.println("History Erased");
                        } catch (IOException e) {
                            System.out.println("An error occurred while trying to erase the history!");
                        }
                        System.out.println("\n(Press enter to continue)");
                        a.nextLine();
                    } else if (Choice.equals("3")) {
                        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                        System.out.println("ATTENTION! This option will only change the location stored in the application. The path change is irreversible!");
                        System.out.println("This will not change the actual location of the history file!");
                        System.out.println("Use this only if you have another history file that is compatible and/or the file is stored in another location!");
                        System.out.println("Type \"007\" if you want to exit this option.");

                        System.out.println("\nCurrent total directory (ignore the \".\"): " + Paths.get("").toAbsolutePath() + file.getPath());
                        System.out.println("Currently written directory: " + file.getPath());

                        System.out.println("\nWrite the new path:");
                        Choice = a.nextLine();

                        if (Choice.equals("007")) {
                            System.out.println("");
                        } else {
                            System.out.println("Updating path...\n");
                            file.setPath(path, Choice);
                            System.out.println("History path updated!");
                        }

                        System.out.println("\n(Press enter to continue)");
                        a.nextLine();
                        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                    } else if (Choice.equals("4")) {
                        // Return to the main menu
                    } else {
                        System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                        System.out.println("The option that you chose is not valid. Try again.");
                    }
                } else if (Choice.equals("4")) {
                    System.out.println("Exiting...");
                    System.exit(0);
                } else {
                    System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                    System.out.println("The option that you chose is not valid. Try again.");
                }
            } else {
                System.out.print("1 = Encrypt" + "\n" +
                        "2 = Decrypt" + "\n" +
                        "3 = Exit\n" +
                        "\n> ");
                Choice = a.nextLine();
                System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");

                if (Choice.equals("1")) {
                    System.out.println("Write the phrase you want to encrypt down below:");
                    System.out.print("> ");
                    Phrase = a.nextLine();
                    System.out.println("\nEncryption in progress...\n");
                    Phrase_to_Encrypt.setPhrase(Phrase);
                    System.out.println("Result:");
                    System.out.println(Phrase_to_Encrypt.Encrypt());
                    System.out.println("\n(Press enter to continue)");
                    a.nextLine();
                    System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                } else if (Choice.equals("2")) {
                    System.out.println("Write the Morse code you want to decrypt down below:");
                    System.out.print("> ");
                    Morse = a.nextLine();
                    System.out.println("\nDecryption in progress...\n");
                    Morse_to_Decrypt.setMorse(Morse);
                    System.out.println("Result:");
                    System.out.println(Morse_to_Decrypt.Decrypt());
                    System.out.println("\n(Press enter to continue)");
                    a.nextLine();
                    System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                } else if (Choice.equals("3")) {
                    System.out.println("Exiting...");
                    System.exit(0);
                } else {
                    System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
                    System.out.println("The option that you chose is not valid. Try again.");
                }
            }
        }
    }
}
